#include<bits/stdc++.h>
#include "treenode.h"
using namespace std;

BinaryTreeNode<int>* takeInputLevelWise(){
	int rootData;
	cout<<"Enter Root Data"<<endl;
	cin>>rootData;
	if(rootData== -1){
		return NULL;
	}
	else{
		BinaryTreeNode<int>* root=new BinaryTreeNode<int>(rootData);
		queue<BinaryTreeNode<int>*> pendingQueue;
		pendingQueue.push(root);
		while(pendingQueue.size()!=0){
			BinaryTreeNode<int>* front=pendingQueue.front();
			pendingQueue.pop();

			cout<<"Enter left child of "<<front->data<<endl;
			int Lchild;
			cin>>Lchild;
			if(Lchild!= -1){
				BinaryTreeNode<int>* child=new BinaryTreeNode<int>(Lchild);
				front->Left=child;
				pendingQueue.push(child);
			}


			cout<<"Enter Right child of"<<front->data<<endl;
			int Rchild;
			cin>>Rchild;
			if(Rchild!= -1){
				BinaryTreeNode<int>* child=new BinaryTreeNode<int>(Rchild);
				front->Right=child;
				pendingQueue.push(child);
			}
		}
		return root;
	}
	
}

void printTree(BinaryTreeNode<int>* root){
	if(root==NULL){
		return;
	}

	cout<<root->data<<" : ";
	if(root->Left!=NULL){
		cout<<"L"<<root->Left->data;
	}
	if(root->Right!=NULL){
		cout<<"R"<<root->Right->data;
	}
	cout<<endl;
	printTree(root->Left);
	printTree(root->Right);
}

int NumNodes(BinaryTreeNode<int>* root){
	if(root==NULL){
		return 0;
	}
	else{
		return 1+NumNodes(root->Left) +NumNodes(root->Right);
	}
}

void preOrder(BinaryTreeNode<int>* root){
	if(root){
		cout<<root->data<<" ";
		preOrder(root->Left);
		preOrder(root->Right);
	}
}
int height(BinaryTreeNode<int>*root){
	if(root==NULL){
		return 0;
	}
	return 1+max(height(root->Left),height(root->Right));
}

int diameter(BinaryTreeNode<int>*root){
	if(root==NULL){
		return 0;
	}

	int option1 = height(root->Left)+height(root->Right);
	int option2 = diameter(root->Left);
	int option3 = diameter(root->Right);

	return max(option1,max(option2,option3));
}

pair<int,int> heightDiamete(BinaryTreeNode<int>* root){
	if(root==NULL){
		pair<int,int>p;
		p.first=0;
		p.second=0;
		return p;
	}

	pair<int,int> leftAns=heightDiamete(root->Left);
	pair<int,int> RightAns=heightDiamete(root->Right);

	int ld=leftAns.second;
	int lh=leftAns.first;
	int rd=RightAns.second;
	int rh=RightAns.first;

	int height=1+max(lh, rh);
	int diameter=max(lh+rh ,max(ld,rd));
	pair<int,int>p;
	p.first=height;
	p.second=diameter;
	return p;

	
}




int main(){

	BinaryTreeNode<int>* root=takeInputLevelWise();
	printTree(root);
	cout<<endl;
	cout<<NumNodes(root);
	cout<<endl;
	preOrder(root);
	cout<<endl;
	cout<<height(root)<<endl;
	cout<<endl;
	cout<<diameter(root)<<endl;
	cout<<endl;

	pair<int,int>p=heightDiamete(root);
	cout<<p.first<<endl;
	cout<<p.second<<endl;



}
